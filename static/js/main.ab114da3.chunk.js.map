{"version":3,"sources":["utils/duration/index.js","pomodoro/FocusButton.js","pomodoro/BreakButton.js","pomodoro/PlayPauseButton.js","utils/class-names/index.js","pomodoro/TimerDisplay.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","FocusButton","focusDuration","isTimerRunning","handleDecreaseFocus","handleIncreaseFocus","className","data-testid","type","disabled","onClick","BreakButton","breakDuration","handleDecreaseBreak","handleIncreaseBreak","PlayPauseButton","classNameToBoolean","playPause","handleStopButton","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","TimerDisplay","session","progressBarCalc","label","timeRemaining","displayPaused","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setProgressBarCalc","setSession","setFocusDuration","setbreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","lastFocusDuration","min","lastbreakDuration","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAaO,SAASA,EAAkBC,GAChC,IAAMC,EAAUC,KAAKC,MAAMH,GAAcI,WAAWC,SAAS,EAAG,KAChE,MAAM,GAAN,OAAUJ,EAAV,OAgBK,SAASK,EAAkBC,GAChC,IAAMN,EAAUC,KAAKC,MAAOI,EAAe,KAAQ,IAChDH,WACAC,SAAS,EAAG,KACTG,EAAUN,KAAKO,MAAMF,EAAe,IACvCH,WACAC,SAAS,EAAG,KACf,MAAM,GAAN,OAAUJ,EAAV,YAAqBO,GCFRE,MAlCf,YAAqH,IAA9FC,EAA6F,EAA7FA,cAAeZ,EAA8E,EAA9EA,kBAAmBa,EAA2D,EAA3DA,eAAgBC,EAA2C,EAA3CA,oBAAqBC,EAAsB,EAAtBA,oBAE9F,OACA,yBAAKC,UAAU,mCACf,0BAAMA,UAAU,mBAAmBC,cAAY,kBAA/C,mBAEmBjB,EAAkBY,IAErC,yBAAKI,UAAU,sBAEb,4BACEE,KAAK,SACLC,SAAUN,EACVG,UAAU,oBACVC,cAAY,iBACZG,QAASN,GAET,0BAAME,UAAU,iBAGlB,4BACEE,KAAK,SACLC,SAAUN,EACVG,UAAU,oBACVC,cAAY,iBACZG,QAASL,GAET,0BAAMC,UAAU,mBCQLK,MAlCf,YAAsH,IAA/FC,EAA8F,EAA9FA,cAAetB,EAA+E,EAA/EA,kBAAmBa,EAA4D,EAA5DA,eAAgBU,EAA4C,EAA5CA,oBAAqBC,EAAuB,EAAvBA,oBAE9F,OACA,yBAAKR,UAAU,mCACf,0BAAMA,UAAU,mBAAmBC,cAAY,kBAA/C,mBAEmBjB,EAAkBsB,IAErC,yBAAKN,UAAU,sBAEb,4BACEE,KAAK,SACLC,SAAUN,EACVG,UAAU,oBACVC,cAAY,iBACZG,QAASG,GAET,0BAAMP,UAAU,iBAGlB,4BACEE,KAAK,SACLC,SAAUN,EACVG,UAAU,oBACVC,cAAY,iBACZG,QAASI,GAET,0BAAMR,UAAU,mBCcLS,MAvCf,YAA2E,ICaxCC,EDbRC,EAA+C,EAA/CA,UAAWd,EAAoC,EAApCA,eAAgBe,EAAoB,EAApBA,iBAEtD,OACI,yBACAZ,UAAU,8BACVa,KAAK,QACLC,aAAW,kBAEX,4BACEZ,KAAK,SACLF,UAAU,kBACVC,cAAY,aACZc,MAAM,uBACNX,QAASO,GAET,0BACEX,WCH2BU,EDGL,CACpBM,IAAI,EACJ,iBAAkBnB,EAClB,iBAAkBA,GCLnBoB,OAAOC,QAAQR,GACnBS,QACC,SAACC,EAAD,0BAAWpB,EAAX,KAAsBqB,EAAtB,YACED,EAAQE,OAAOD,EAAQrB,OAAYuB,KACrC,IAEDC,QAAO,SAACxB,GAAD,YAA6BuB,IAAdvB,KACtByB,KAAK,SDIN,4BACEvB,KAAK,SACLC,UAAWN,EACXG,UAAU,oBACVC,cAAY,OACZc,MAAM,mBACNX,QAASQ,GAET,0BAAMZ,UAAU,wBESP0B,MA7Cf,YAAyI,IAAjH1C,EAAgH,EAAhHA,kBAAmBO,EAA6F,EAA7FA,kBAAmBK,EAA0E,EAA1EA,cAAeU,EAA2D,EAA3DA,cAAeqB,EAA4C,EAA5CA,QAAS9B,EAAmC,EAAnCA,eAAgB+B,EAAmB,EAAnBA,gBASnH,OACC,6BACED,GAAY,6BAET,yBAAK3B,UAAU,YACb,yBAAKA,UAAU,OAEb,wBAAIC,cAAY,iBACb0B,EAAQE,MADX,QACyC,aAAlBF,EAAQE,MAAuB7C,EAAkBY,GAAiBZ,EAAkBsB,GAD3G,YAIA,uBAAGN,UAAU,OAAOC,cAAY,qBAC7BV,EAAkBoC,EAAQG,eAD7B,cAGA,4BApBR,WACI,IAAIjC,EACF,MAAO,SAkBAkC,MAGT,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WAAWgC,MAAO,CAAEC,OAAQ,SACzC,yBACEjC,UAAU,eACVa,KAAK,cACLqB,gBAAc,IACdC,gBAAc,MACdC,gBAAeR,EACfI,MAAO,CAAEK,MAAM,GAAD,OAAKT,EAAL,cCnB9B,SAASU,EAASC,GAChB,IAAMT,EAAgB3C,KAAKqD,IAAI,EAAGD,EAAUT,cAAgB,GAC5D,OAAO,2BACFS,GADL,IAEET,kBAmKWW,MApIf,WAEE,MAA4CC,oBAAS,GAArD,mBAAO7C,EAAP,KAAuB8C,EAAvB,KAEA,EAA8CD,mBAAS,GAAvD,mBAAOd,EAAP,KAAwBgB,EAAxB,KAGA,EAA8BF,mBAAS,MAAvC,mBAAOf,EAAP,KAAgBkB,EAAhB,KAGA,EAA0CH,mBAAS,IAAnD,mBAAO9C,EAAP,KAAsBkD,EAAtB,KAEA,EAA0CJ,mBAAS,GAAnD,mBAAOpC,EAAP,KAAsByC,EAAtB,KA0EA,OCvIa,SAAqBC,EAAUC,GAC5C,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAKR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aALX,WACEL,EAAcG,YAIaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IDkDJQ,EAAY,WACsB,IAA1B9B,EAAQG,gBACV,IAAI4B,MAAM,gDAAgDC,OAC1Dd,EAxCR,SAAqBjD,EAAeU,GAIlC,OAAO,SAACsD,GACN,MAA6B,aAAzBA,EAAe/B,MACV,CACLA,MAAO,WACPC,cAA+B,GAAhBxB,GAGZ,CACLuB,MAAO,WACPC,cAA+B,GAAhBlC,IA2BFiE,CAAYjE,EAAeU,KAExCuC,EAAWP,GAEQ,aAAlBX,EAAQE,MAETe,GAAmC,GAAdhD,EAAoB+B,EAAQG,gBAAgC,GAAdlC,GAAoB,KAGvFgD,GAAmC,GAAdtC,EAAoBqB,EAAQG,gBAAgC,GAAdxB,GAAoB,OAIzFT,EAAiB,IAAO,MAoDxB,yBAAKG,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CACAJ,cAAeA,EACfZ,kBAAmBA,EACnBa,eAAgBA,EAChBC,oBA3BoB,WAE1BgD,GAAiB,SAACgB,GAAD,OAAuB3E,KAAKqD,IAAI,EAAGsB,EAAoB,OA0BlE/D,oBAjCoB,WAExB+C,GAAiB,SAACgB,GAAD,OAAuB3E,KAAK4E,IAAI,GAAID,EAAoB,UAkCvE,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,CACAM,cAAeA,EACftB,kBAAmBA,EACnBa,eAAgBA,EAChBU,oBAhCkB,WAC1BwC,GAAiB,SAACiB,GAAD,OAAuB7E,KAAKqD,IAAI,EAAGwB,EAAoB,OAgChExD,oBA7BkB,WAC1BuC,GAAiB,SAACiB,GAAD,OAAuB7E,KAAK4E,IAAI,GAAIC,EAAoB,YAiCvE,yBAAKhE,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CACEW,UAxEV,WACEgC,GAAkB,SAACJ,GAEjB,IAAM0B,GAAa1B,EAcnB,OAbI0B,GACFpB,GAAW,SAACqB,GAGV,OAAyB,OAArBA,EACK,CACLrC,MAAO,WACPC,cAA+B,GAAhBlC,GAGZsE,KAGJD,MAwDDpE,eAAgBA,EAChBe,iBAnCe,WACvBiC,EAAW,MACXF,GAAkB,QAqChB,kBAAC,EAAD,CACA3D,kBAAmBA,EACnBO,kBAAmBA,EACnBK,cAAeA,EACfU,cAAeA,EACfqB,QAASA,EACT9B,eAAgBA,EAChB+B,gBAAiBA,MElKRuC,MAbf,WACE,OACE,yBAAKnE,UAAU,OACb,4BAAQA,UAAU,wBAChB,+CAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCPRoE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.ab114da3.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\n\nfunction FocusButton({ focusDuration, minutesToDuration, isTimerRunning, handleDecreaseFocus, handleIncreaseFocus}) {\n\nreturn (\n<div className=\"input-group input-group-lg mb-2\">\n<span className=\"input-group-text\" data-testid=\"duration-focus\">\n  {/* TODO: Update this text to display the current focus session duration */}\n  Focus Duration: {minutesToDuration(focusDuration)}\n</span>\n<div className=\"input-group-append\">\n  {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n  <button\n    type=\"button\"\n    disabled={isTimerRunning}\n    className=\"btn btn-secondary\"\n    data-testid=\"decrease-focus\"\n    onClick={handleDecreaseFocus}\n  >\n    <span className=\"oi oi-minus\" />\n  </button>\n  {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n  <button\n    type=\"button\"\n    disabled={isTimerRunning}\n    className=\"btn btn-secondary\"\n    data-testid=\"increase-focus\"\n    onClick={handleIncreaseFocus}\n  >\n    <span className=\"oi oi-plus\" />\n  </button>\n</div>\n</div>\n)\n}\n\nexport default FocusButton;","\nimport React from \"react\";\n\nfunction BreakButton({ breakDuration, minutesToDuration, isTimerRunning, handleDecreaseBreak, handleIncreaseBreak }) {\n\nreturn (\n<div className=\"input-group input-group-lg mb-2\">\n<span className=\"input-group-text\" data-testid=\"duration-break\">\n  {/* TODO: Update this text to display the current break session duration */}\n  Break Duration: {minutesToDuration(breakDuration)}\n</span>\n<div className=\"input-group-append\">\n  {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n  <button\n    type=\"button\"\n    disabled={isTimerRunning}\n    className=\"btn btn-secondary\"\n    data-testid=\"decrease-break\"\n    onClick={handleDecreaseBreak}\n  >\n    <span className=\"oi oi-minus\" />\n  </button>\n  {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n  <button\n    type=\"button\"\n    disabled={isTimerRunning}\n    className=\"btn btn-secondary\"\n    data-testid=\"increase-break\"\n    onClick={handleIncreaseBreak}\n  >\n    <span className=\"oi oi-plus\" />\n  </button>\n</div>\n</div>\n)\n}\n\nexport default BreakButton;","\nimport React from \"react\";\nimport classNames from \"../utils/class-names/index\";\n\n\nfunction PlayPauseButton({ playPause, isTimerRunning, handleStopButton }) {\n\nreturn (\n    <div\n    className=\"btn-group btn-group-lg mb-2\"\n    role=\"group\"\n    aria-label=\"Timer controls\"\n  >\n    <button\n      type=\"button\"\n      className=\"btn btn-primary\"\n      data-testid=\"play-pause\"\n      title=\"Start or pause timer\"\n      onClick={playPause}\n    >\n      <span\n        className={classNames({\n          oi: true,\n          \"oi-media-play\": !isTimerRunning,\n          \"oi-media-pause\": isTimerRunning,\n        })}\n      />\n    </button>\n    {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n    {/* TODO: Disable the stop button when there is no active session */}\n    <button\n      type=\"button\"\n      disabled={!isTimerRunning}\n      className=\"btn btn-secondary\"\n      data-testid=\"stop\"\n      title=\"Stop the session\"\n      onClick={handleStopButton}\n    >\n      <span className=\"oi oi-media-stop\" />\n    </button>\n  </div>\n )\n}\n\nexport default PlayPauseButton;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\n\nfunction TimerDisplay({ minutesToDuration, secondsToDuration, focusDuration, breakDuration, session, isTimerRunning, progressBarCalc }) {\n\n\n    function displayPaused() {\n        if(!isTimerRunning){\n          return \"PAUSED\"\n        }\n      };\n\n  return(\n   <div>\n    {session && (<div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {session.label} for {session.label === \"Focusing\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration)} minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n            <h2>{displayPaused()}</h2>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progressBarCalc} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressBarCalc}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>)}\n   </div>\n  )\n}\n\nexport default TimerDisplay;\n","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport FocusButton from \"./FocusButton\";\nimport BreakButton from \"./BreakButton\";\nimport PlayPauseButton from \"./PlayPauseButton\";\nimport TimerDisplay from \"./TimerDisplay\";\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  \n  const [progressBarCalc, setProgressBarCalc] = useState(0);\n\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n\n  const [breakDuration, setbreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/2386.mp3\").play();\n        setSession(nextSession(focusDuration, breakDuration));\n      }\n      setSession(nextTick);\n    \n    if(session.label === \"Focusing\"){\n      //set\n      setProgressBarCalc(((focusDuration*60) - session.timeRemaining) / (focusDuration*60) * 100);\n      //console.log(progressBarCalc);\n    } else{\n      setProgressBarCalc(((breakDuration*60) - session.timeRemaining) / (breakDuration*60) * 100);\n      //console.log(progressBarCalc);\n    }\n  },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  const handleIncreaseFocus = () => {\n    // pure function that has a task of increasing focus duration Math.min acts as a limiter if focusState becomes >60\n      setFocusDuration((lastFocusDuration) => Math.min(60, lastFocusDuration + 5));\n  };\n\n  const handleDecreaseFocus = () => {\n    // pure function that has a task of decrease focus duration Math.max acts as a limiter if focusState becomes < 5\n    setFocusDuration((lastFocusDuration) => Math.max(5, lastFocusDuration - 5));\n  };\n\n  const handleDecreaseBreak = () => {\n    setbreakDuration((lastbreakDuration) => Math.max(1, lastbreakDuration - 1));\n  };\n\n  const handleIncreaseBreak = () => {\n    setbreakDuration((lastbreakDuration) => Math.min(15, lastbreakDuration + 1));\n  };\n\n  const handleStopButton = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n  };\n\n   \n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <FocusButton\n          focusDuration={focusDuration}\n          minutesToDuration={minutesToDuration}\n          isTimerRunning={isTimerRunning}\n          handleDecreaseFocus={handleDecreaseFocus}\n          handleIncreaseFocus={handleIncreaseFocus}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <BreakButton\n            breakDuration={breakDuration}\n            minutesToDuration={minutesToDuration}\n            isTimerRunning={isTimerRunning}\n            handleDecreaseBreak={handleDecreaseBreak}\n            handleIncreaseBreak={handleIncreaseBreak}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <PlayPauseButton\n            playPause={playPause}\n            isTimerRunning={isTimerRunning}\n            handleStopButton={handleStopButton}\n          />\n        </div>\n      </div>\n      <TimerDisplay\n      minutesToDuration={minutesToDuration}\n      secondsToDuration={secondsToDuration}\n      focusDuration={focusDuration}\n      breakDuration={breakDuration}\n      session={session}\n      isTimerRunning={isTimerRunning}\n      progressBarCalc={progressBarCalc}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}